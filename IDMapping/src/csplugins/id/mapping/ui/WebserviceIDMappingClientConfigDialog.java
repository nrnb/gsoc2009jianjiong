/*
 Copyright (c) 2006, 2007, The Cytoscape Consortium (www.cytoscape.org)

 The Cytoscape Consortium is:
 - Institute for Systems Biology
 - University of California San Diego
 - Memorial Sloan-Kettering Cancer Center
 - Institut Pasteur
 - Agilent Technologies

 This library is free software; you can redistribute it and/or modify it
 under the terms of the GNU Lesser General Public License as published
 by the Free Software Foundation; either version 2.1 of the License, or
 any later version.

 This library is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF
 MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  The software and
 documentation provided hereunder is on an "as is" basis, and the
 Institute for Systems Biology and the Whitehead Institute
 have no obligations to provide maintenance, support,
 updates, enhancements or modifications.  In no event shall the
 Institute for Systems Biology and the Whitehead Institute
 be liable to any party for direct, indirect, special,
 incidental or consequential damages, including lost profits, arising
 out of the use of this software and its documentation, even if the
 Institute for Systems Biology and the Whitehead Institute
 have been advised of the possibility of such damage.  See
 the GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with this library; if not, write to the Free Software Foundation,
 Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
 */

package csplugins.id.mapping.ui;

import csplugins.id.mapping.IDMapperClient;
import csplugins.id.mapping.IDMapperClientImplTunables;

import cytoscape.util.OpenBrowser;

import org.bridgedb.IDMapperException;
import org.bridgedb.webservice.IDMapperWebservice;
import org.bridgedb.webservice.IDMapperBiomart;
import org.bridgedb.webservice.biomart.Database;
import org.bridgedb.webservice.biomart.Dataset;
import org.bridgedb.webservice.biomart.BiomartStub;
import org.bridgedb.webservice.picr.IDMapperPicrRest;
import org.bridgedb.webservice.synergizer.IDMapperSynergizer;
import org.bridgedb.webservice.synergizer.SynergizerStub;

import java.util.Set;
import java.util.HashSet;
import java.util.Vector;
import java.util.Map;
import java.util.HashMap;
import java.util.Collections;
import java.util.Comparator;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

// TODO: seperate different web service into different panels
/**
 *
 * @author gjj
 */
public class WebserviceIDMappingClientConfigDialog extends javax.swing.JDialog {

    public enum ClientType {
        BIOMART("BioMart web service"),
        PICR("PICR (Protein Identifier Cross-Reference) web service"),
        SYNERGIZER("The Synergizer web service")
                ;

        private ClientType(String desc) {
            this.desc = desc;
        }

        public String toString() {
            return desc;
        }

        private String desc;
    }

    // add a new client
    public WebserviceIDMappingClientConfigDialog(javax.swing.JDialog parent, boolean modal) {
        this(parent, modal, null);
    }

    // configure a existing client
    public  WebserviceIDMappingClientConfigDialog(javax.swing.JDialog parent,
            boolean modal, IDMapperClient client) {
        super(parent, modal);
        this.client = client;
        if (client!=null) {
            idMapper = (IDMapperWebservice) client.getIDMapper();
            if (idMapper instanceof IDMapperBiomart) {
                connectBiomart();
            } else if (idMapper instanceof IDMapperSynergizer) {
                connectSynergizer();
            }
        }        

        loadBiomartFilterFile();
        
        initComponents();

        initMapTypePanel();
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        javax.swing.JPanel typePanel = new javax.swing.JPanel();
        typeComboBox = new javax.swing.JComboBox();
        javax.swing.JButton infoButton = new javax.swing.JButton();
        biomartPanel = new javax.swing.JPanel();
        javax.swing.JPanel chooseDBPanel = new javax.swing.JPanel();
        chooseDBComboBox = new javax.swing.JComboBox();
        javax.swing.JPanel chooseDatasetPanel = new javax.swing.JPanel();
        chooseDatasetComboBox = new javax.swing.JComboBox();
        javax.swing.JPanel biomartOpPanel = new javax.swing.JPanel();
        biomartOptionCheckBox = new javax.swing.JCheckBox();
        biomartAdvancedPanel = new javax.swing.JPanel();
        biomartTransitivityCheckBox = new javax.swing.JCheckBox();
        biomartFilterTgtCheckBox = new javax.swing.JCheckBox();
        javax.swing.JPanel biomartBaseUrlPanel = new javax.swing.JPanel();
        biomartBaseUrlTextField = new javax.swing.JTextField();
        javax.swing.JButton biomartBaseUrlButton = new javax.swing.JButton();
        picrPanel = new javax.swing.JPanel();
        javax.swing.JPanel picrOpPanel = new javax.swing.JPanel();
        picrOptionCheckBox = new javax.swing.JCheckBox();
        picrAdvancedPanel = new javax.swing.JPanel();
        picrOnlyActiveCheckBox = new javax.swing.JCheckBox();
        synergizerPanel = new javax.swing.JPanel();
        javax.swing.JPanel chooseAuthorityPanel = new javax.swing.JPanel();
        chooseAuthorityComboBox = new javax.swing.JComboBox();
        javax.swing.JPanel chooseSpeciesPanel = new javax.swing.JPanel();
        chooseSpeciesComboBox = new javax.swing.JComboBox();
        javax.swing.JPanel synergizerOpPanel = new javax.swing.JPanel();
        synergizerOptionCheckBox = new javax.swing.JCheckBox();
        synergizerAdvancedPanel = new javax.swing.JPanel();
        javax.swing.JPanel synergizerBaseUrlPanel = new javax.swing.JPanel();
        synergizerBaseUrlTextField = new javax.swing.JTextField();
        javax.swing.JButton synergizerBaseUrlButton = new javax.swing.JButton();
        javax.swing.JPanel okPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Webservice-based ID Mapping Resources Configuration");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        typePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Web Service Type"));
        typePanel.setLayout(new javax.swing.BoxLayout(typePanel, javax.swing.BoxLayout.LINE_AXIS));

        ClientType[] types = ClientType.values();
        typeComboBox.setModel(new javax.swing.DefaultComboBoxModel(types));
        if (idMapper==null) {

        } else if (idMapper instanceof IDMapperBiomart) {
            typeComboBox.setSelectedItem(ClientType.BIOMART);
            typeComboBox.setEnabled(false);
        } else if (idMapper instanceof IDMapperPicrRest) {
            typeComboBox.setSelectedItem(ClientType.PICR);
            typeComboBox.setEnabled(false);
        } else if (idMapper instanceof IDMapperSynergizer) {
            typeComboBox.setSelectedItem(ClientType.SYNERGIZER);
            typeComboBox.setEnabled(false);
        }
        typeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeComboBoxActionPerformed(evt);
            }
        });
        typePanel.add(typeComboBox);

        infoButton.setText("Info");
        infoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoButtonActionPerformed(evt);
            }
        });
        typePanel.add(infoButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(typePanel, gridBagConstraints);

        biomartPanel.setLayout(new java.awt.GridBagLayout());
        biomartPanel.setVisible(typeComboBox.getSelectedItem()==ClientType.BIOMART);

        chooseDBPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Mart/Database"));
        chooseDBPanel.setMinimumSize(new java.awt.Dimension(400, 48));
        chooseDBPanel.setPreferredSize(new java.awt.Dimension(400, 50));
        chooseDBPanel.setLayout(new javax.swing.BoxLayout(chooseDBPanel, javax.swing.BoxLayout.LINE_AXIS));

        if (idMapper==null) {
            chooseDBComboBox.setModel(new DefaultComboBoxModel(getVisibleBiomart()));
        } else if (idMapper instanceof IDMapperBiomart) {
            chooseDBComboBox.setModel(new DefaultComboBoxModel(new Database[] {
                biomartStub.getDatabase(((IDMapperBiomart)idMapper).getMart())}));
    chooseDBComboBox.setEnabled(false);
    }
    chooseDBComboBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            chooseDBComboBoxActionPerformed(evt);
        }
    });
    chooseDBPanel.add(chooseDBComboBox);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
    biomartPanel.add(chooseDBPanel, gridBagConstraints);

    chooseDatasetPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Dataset"));
    chooseDatasetPanel.setLayout(new javax.swing.BoxLayout(chooseDatasetPanel, javax.swing.BoxLayout.LINE_AXIS));

    if (idMapper==null) {
        setDatasetsCombo();
    } else if(idMapper instanceof IDMapperBiomart) {
        Dataset ds = biomartStub.getDataset(((IDMapperBiomart)idMapper).getDataset());
        chooseDatasetComboBox.setModel(new DefaultComboBoxModel(new Dataset[] {ds}));
        chooseDatasetComboBox.setEnabled(false);
    }
    chooseDatasetPanel.add(chooseDatasetComboBox);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
    biomartPanel.add(chooseDatasetPanel, gridBagConstraints);

    biomartOpPanel.setLayout(new java.awt.GridBagLayout());

    biomartOptionCheckBox.setSelected(idMapper!=null);
    biomartOptionCheckBox.setText("Show advanced option");
    biomartOptionCheckBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            biomartOptionCheckBoxActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
    biomartOpPanel.add(biomartOptionCheckBox, gridBagConstraints);

    biomartAdvancedPanel.setLayout(new java.awt.GridBagLayout());
    biomartAdvancedPanel.setVisible(biomartOptionCheckBox.isSelected());

    biomartTransitivityCheckBox.setSelected(idMapper!=null &&
        idMapper instanceof IDMapperBiomart &&
        ((IDMapperBiomart)idMapper).getTransitivity());
    biomartTransitivityCheckBox.setText("Support transitivity of ID mappings");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
    biomartAdvancedPanel.add(biomartTransitivityCheckBox, gridBagConstraints);

    biomartFilterTgtCheckBox.setSelected(idMapper==null ||
        !(idMapper instanceof IDMapperBiomart) ||
        ((IDMapperBiomart)idMapper).getIDOnlyForTgtDataSource());
    biomartFilterTgtCheckBox.setText("Filter supported target source ID with IDs or accessions only");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
    biomartAdvancedPanel.add(biomartFilterTgtCheckBox, gridBagConstraints);

    biomartBaseUrlPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Base URL of BioMart"));
    biomartBaseUrlPanel.setLayout(new java.awt.GridBagLayout());

    biomartBaseUrlTextField.setText(idMapper==null || !(idMapper instanceof IDMapperBiomart)?
        biomartStub.defaultBaseURL:((IDMapperBiomart)idMapper).getBaseURL());
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
    biomartBaseUrlPanel.add(biomartBaseUrlTextField, gridBagConstraints);

    biomartBaseUrlButton.setText("Change");
    biomartBaseUrlButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            biomartBaseUrlButtonActionPerformed(evt);
        }
    });
    biomartBaseUrlPanel.add(biomartBaseUrlButton, new java.awt.GridBagConstraints());

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    biomartAdvancedPanel.add(biomartBaseUrlPanel, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    biomartOpPanel.add(biomartAdvancedPanel, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
    biomartPanel.add(biomartOpPanel, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    getContentPane().add(biomartPanel, gridBagConstraints);

    picrPanel.setVisible(typeComboBox.getSelectedItem()==ClientType.PICR);
    picrPanel.setLayout(new java.awt.GridBagLayout());

    picrOpPanel.setLayout(new java.awt.GridBagLayout());

    picrOptionCheckBox.setSelected(idMapper!=null);
    picrOptionCheckBox.setText("Show advanced option");
    picrOptionCheckBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            picrOptionCheckBoxActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
    picrOpPanel.add(picrOptionCheckBox, gridBagConstraints);

    picrAdvancedPanel.setLayout(new java.awt.GridBagLayout());
    picrAdvancedPanel.setVisible(picrOptionCheckBox.isSelected());

    picrOnlyActiveCheckBox.setSelected(idMapper==null ||
        !(idMapper instanceof IDMapperPicrRest) ||
        ((IDMapperPicrRest)idMapper).getOnlyActive());
    picrOnlyActiveCheckBox.setText("Use only active mappings (remove deleted mappings)");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
    picrAdvancedPanel.add(picrOnlyActiveCheckBox, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    picrOpPanel.add(picrAdvancedPanel, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
    picrPanel.add(picrOpPanel, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    getContentPane().add(picrPanel, gridBagConstraints);

    synergizerPanel.setLayout(new java.awt.GridBagLayout());
    synergizerPanel.setVisible(typeComboBox.getSelectedItem()==ClientType.SYNERGIZER);

    chooseAuthorityPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Authority"));
    chooseAuthorityPanel.setMinimumSize(new java.awt.Dimension(400, 48));
    chooseAuthorityPanel.setPreferredSize(new java.awt.Dimension(400, 50));
    chooseAuthorityPanel.setLayout(new javax.swing.BoxLayout(chooseAuthorityPanel, javax.swing.BoxLayout.LINE_AXIS));

    if (idMapper==null) {
        chooseAuthorityComboBox.setModel(new DefaultComboBoxModel(getSynergizerAuthorities()));
    } else if (idMapper instanceof IDMapperSynergizer) {
        String auth = ((IDMapperSynergizer)idMapper).getAuthority();
        chooseAuthorityComboBox.setModel(new DefaultComboBoxModel(new String[]{auth}));
        chooseAuthorityComboBox.setEnabled(false);
    }
    chooseAuthorityComboBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            chooseAuthorityComboBoxActionPerformed(evt);
        }
    });
    chooseAuthorityPanel.add(chooseAuthorityComboBox);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
    synergizerPanel.add(chooseAuthorityPanel, gridBagConstraints);

    chooseSpeciesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Species"));
    chooseSpeciesPanel.setLayout(new javax.swing.BoxLayout(chooseSpeciesPanel, javax.swing.BoxLayout.LINE_AXIS));

    if (idMapper==null) {
        setSynergizerSpecies();
    } else if(idMapper instanceof IDMapperSynergizer) {
        String species = ((IDMapperSynergizer)idMapper).getSpecies();
        chooseSpeciesComboBox.setModel(new DefaultComboBoxModel(new String[] {species}));
        chooseSpeciesComboBox.setEnabled(false);
    }
    chooseSpeciesPanel.add(chooseSpeciesComboBox);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
    synergizerPanel.add(chooseSpeciesPanel, gridBagConstraints);

    synergizerOpPanel.setLayout(new java.awt.GridBagLayout());

    synergizerOptionCheckBox.setSelected(idMapper!=null);
    synergizerOptionCheckBox.setText("Show advanced option");
    synergizerOptionCheckBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            synergizerOptionCheckBoxActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
    synergizerOpPanel.add(synergizerOptionCheckBox, gridBagConstraints);

    synergizerAdvancedPanel.setLayout(new java.awt.GridBagLayout());
    synergizerAdvancedPanel.setVisible(synergizerOptionCheckBox.isSelected());

    synergizerBaseUrlPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("URL of Synergizer Server"));
    synergizerBaseUrlPanel.setLayout(new java.awt.GridBagLayout());

    synergizerBaseUrlTextField.setText(idMapper==null || !(idMapper instanceof IDMapperSynergizer)?
        SynergizerStub.defaultBaseURL:((IDMapperSynergizer)idMapper).getBaseUrl());
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
    synergizerBaseUrlPanel.add(synergizerBaseUrlTextField, gridBagConstraints);

    synergizerBaseUrlButton.setText("Change");
    synergizerBaseUrlButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            synergizerBaseUrlButtonActionPerformed(evt);
        }
    });
    synergizerBaseUrlPanel.add(synergizerBaseUrlButton, new java.awt.GridBagConstraints());

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    synergizerAdvancedPanel.add(synergizerBaseUrlPanel, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    synergizerOpPanel.add(synergizerAdvancedPanel, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
    synergizerPanel.add(synergizerOpPanel, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    getContentPane().add(synergizerPanel, gridBagConstraints);

    okPanel.setLayout(new javax.swing.BoxLayout(okPanel, javax.swing.BoxLayout.LINE_AXIS));

    okButton.setText("   OK   ");
    okButton.setToolTipText("");
    okButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            okButtonActionPerformed(evt);
        }
    });
    okPanel.add(okButton);

    cancelButton.setText("Cancel");
    cancelButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            cancelButtonActionPerformed(evt);
        }
    });
    okPanel.add(cancelButton);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
    getContentPane().add(okPanel, gridBagConstraints);

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void biomartOptionCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_biomartOptionCheckBoxActionPerformed
        biomartAdvancedPanel.setVisible(biomartOptionCheckBox.isSelected());
        this.pack();
}//GEN-LAST:event_biomartOptionCheckBoxActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        setVisible(false);
        this.dispose();
}//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        if (verifyInput()) {
            if (idMapper!=null) { // config
                String[] strs = this.getSettings();
                String connStr = strs[0];
                try {
                    client.setConnectionString(connStr);
                } catch(Exception e) {
                    e.printStackTrace();
                    System.err.println(connStr);
                    JOptionPane.showMessageDialog(this, "Error: failed to configure");
                }

            }
            cancelled = false;
            setVisible(false);
            this.dispose();
        }
}//GEN-LAST:event_okButtonActionPerformed

    private void chooseDBComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseDBComboBoxActionPerformed
        this.setDatasetsCombo();
    }//GEN-LAST:event_chooseDBComboBoxActionPerformed

    private void biomartBaseUrlButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_biomartBaseUrlButtonActionPerformed
        String baseUrl = biomartBaseUrlTextField.getText();
        if (baseUrl==null || baseUrl.length()==0) {
            int ret = JOptionPane.showConfirmDialog(this,
                    "Error: the Biomart URL is empty. \n" +
                    "Use default: "+BiomartStub.defaultBaseURL+"?",
                    "Empty URL", JOptionPane.YES_NO_OPTION);
            if (ret==JOptionPane.YES_OPTION) {
                biomartBaseUrlTextField.setText(BiomartStub.defaultBaseURL);
                baseUrl = BiomartStub.defaultBaseURL;
            } else {
                return;
            }
        }

        try {
            biomartStub = BiomartStub.getInstance(baseUrl);
        } catch (Exception e) {
            int ret = JOptionPane.showConfirmDialog(this,
                    "Error: failed to connect to the Biomart. \n" +
                    "Use default: "+BiomartStub.defaultBaseURL+"?",
                    "Failed", JOptionPane.YES_NO_OPTION);
            if (ret==JOptionPane.YES_OPTION) {
                biomartBaseUrlTextField.setText(BiomartStub.defaultBaseURL);
                baseUrl = BiomartStub.defaultBaseURL;
                try {
                    biomartStub = BiomartStub.getInstance(baseUrl);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Error: failed to connect to the Biomart. \n" +
                            "Please try later.");
                    return;
                }

            } else {
                return;
            }
        }

        chooseDBComboBox.setModel(new DefaultComboBoxModel(getVisibleBiomart()));
        setDatasetsCombo();
    }//GEN-LAST:event_biomartBaseUrlButtonActionPerformed

    private void picrOptionCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_picrOptionCheckBoxActionPerformed
        picrAdvancedPanel.setVisible(picrOptionCheckBox.isSelected());
        this.pack();
    }//GEN-LAST:event_picrOptionCheckBoxActionPerformed

    private void typeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeComboBoxActionPerformed
        ClientType type = (ClientType)typeComboBox.getSelectedItem();
        for (Map.Entry<ClientType,JPanel> entry : mapTypePanel.entrySet()) {
            JPanel panel = entry.getValue();
            panel.setVisible(type==entry.getKey());
        }

        this.pack();
    }//GEN-LAST:event_typeComboBoxActionPerformed

    private void chooseAuthorityComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseAuthorityComboBoxActionPerformed
        this.setSynergizerSpecies();
    }//GEN-LAST:event_chooseAuthorityComboBoxActionPerformed

    private void synergizerOptionCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_synergizerOptionCheckBoxActionPerformed
        synergizerAdvancedPanel.setVisible(synergizerOptionCheckBox.isSelected());
        this.pack();
    }//GEN-LAST:event_synergizerOptionCheckBoxActionPerformed

    private void synergizerBaseUrlButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_synergizerBaseUrlButtonActionPerformed
        String baseUrl = synergizerBaseUrlTextField.getText();
        if (baseUrl==null || baseUrl.length()==0) {
            int ret = JOptionPane.showConfirmDialog(this,
                    "Error: the Synergizer server URL is empty. \n" +
                    "Use default: "+SynergizerStub.defaultBaseURL+"?",
                    "Empty URL", JOptionPane.YES_NO_OPTION);
            if (ret==JOptionPane.YES_OPTION) {
                synergizerBaseUrlTextField.setText(SynergizerStub.defaultBaseURL);
                baseUrl = SynergizerStub.defaultBaseURL;
            } else {
                return;
            }
        }

        try {
            synergizerStub = SynergizerStub.getInstance(baseUrl);
        } catch (Exception e) {
            int ret = JOptionPane.showConfirmDialog(this,
                    "Error: failed to connect to the Synergizer server. \n" +
                    "Use default: "+SynergizerStub.defaultBaseURL+"?",
                    "Failed", JOptionPane.YES_NO_OPTION);
            if (ret==JOptionPane.YES_OPTION) {
                synergizerBaseUrlTextField.setText(SynergizerStub.defaultBaseURL);
                baseUrl = SynergizerStub.defaultBaseURL;
                try {
                    synergizerStub = SynergizerStub.getInstance(baseUrl);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Error: failed to connect " +
                            "to the Synergizer server. \nPlease try later.");
                    return;
                }

            } else {
                return;
            }
        }

        chooseAuthorityComboBox.setModel(new DefaultComboBoxModel(
                getSynergizerAuthorities()));
        setSynergizerSpecies();
    }//GEN-LAST:event_synergizerBaseUrlButtonActionPerformed

    private void infoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoButtonActionPerformed
        ClientType type = (ClientType)typeComboBox.getSelectedItem();
        if (type==ClientType.BIOMART) {
            OpenBrowser.openURL("http://www.biomart.org/");
        } else if (type==ClientType.PICR) {
            OpenBrowser.openURL("http://www.ebi.ac.uk/Tools/picr/");
        } else if (type==ClientType.SYNERGIZER) {
            OpenBrowser.openURL("http://llama.med.harvard.edu/synergizer/translate/");
        }
    }//GEN-LAST:event_infoButtonActionPerformed

    private boolean verifyInput() {
        if (typeComboBox.getSelectedItem()==ClientType.BIOMART &&
                biomartStub==null) {
            JOptionPane.showMessageDialog(this, "Error: failed to connect to a Biomart.");
        }

        return true;
    }

    public Vector<String> getSynergizerAuthorities() {
        if (!connectSynergizer()) {
            JOptionPane.showMessageDialog(this, "Failed to connect to Synergizer.");
        }

        if (synergizerStub==null) {
            return new Vector();
        }

        Vector<String> auths;
        try {
            auths = new Vector(synergizerStub.availableAuthorities());
        } catch (IDMapperException e) {
            JOptionPane.showMessageDialog(this, "Failed to connect to Synergizer.");
            return new Vector();
        }

        Collections.sort(auths);
        return auths;
    }
    
    private Vector<Database> getVisibleBiomart() {
        if (!connectBiomart()) {
            JOptionPane.showMessageDialog(this, "Failed to connect to BioMart.");
        }

        if (biomartStub==null) {
            return new Vector();
        }

        Map<String, Database> reg = null;
        try {
            reg = biomartStub.getRegistry();
        } catch (Exception e) {
            e.printStackTrace();
            return new Vector();
        }

        if (reg==null) {
            return new Vector();
        }
        
        Vector<Database> dbs = new Vector(reg.size());
        for (Database db : reg.values()) {
            if (db.visible() && !databaseFilter.contains(db.getName())) {
                dbs.add(db);
            }
        }

        Collections.sort(dbs, new Comparator<Database>() {
            public int compare(Database db1, Database db2) {
                return db1.toString().compareTo(db2.toString());
            }
        });

        return dbs;
    }

    private void setSynergizerSpecies() {
        String auth = (String) chooseAuthorityComboBox.getSelectedItem();
        Vector<String> species = new Vector();
        try {
            species = new Vector(synergizerStub.availableSpecies(auth));
        } catch (IDMapperException e) {
            e.printStackTrace();
        }

        Collections.sort(species);
        this.chooseSpeciesComboBox.setModel(new DefaultComboBoxModel(species));
    }

    private void setDatasetsCombo() {
        Database db = (Database) chooseDBComboBox.getSelectedItem();
        Vector<Dataset> datasets = new Vector();
        try {
            datasets = biomartStub.getAvailableDatasets(db.getName());
        } catch(Exception e) {
            e.printStackTrace();
        }

        datasets.removeAll(datasetFilter);

        Collections.sort(datasets, new Comparator<Dataset>() {
            public int compare(Dataset db1, Dataset db2) {
                return db1.toString().compareTo(db2.toString());
            }
        });

        chooseDatasetComboBox.setModel(new DefaultComboBoxModel(datasets));
    }

    private boolean connectSynergizer() {
        if (synergizerStub!=null) {
            return true;
        }

        try {
            if (idMapper==null) {
                synergizerStub = SynergizerStub.getInstance();
            } else {
                synergizerStub = SynergizerStub.getInstance(((IDMapperSynergizer)idMapper).getBaseUrl());
            }
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }

        return true;
    }

    private boolean connectBiomart() {
        if (biomartStub!=null) {
            return true;
        }
        
        try {
            if (idMapper==null) {
                biomartStub = BiomartStub.getInstance();
            } else if (idMapper instanceof IDMapperBiomart) {
                biomartStub = BiomartStub.getInstance(((IDMapperBiomart)idMapper).getBaseURL());
            }
        } catch(IOException e) {
            e.printStackTrace();
            return false;
        }

        return true;
    }

    public IDMapperClient getIDMappingClient()
            throws ClassNotFoundException, IDMapperException {
        if (client!=null) {
            return client;
        }

        String[] strs = getSettings();
        String connStr = strs[0];
        String className = strs[1];
        String displayName = strs[2];

        return new IDMapperClientImplTunables(connStr, className, displayName);

    }

    private String[] getSettings() {        
        ClientType type = (ClientType) typeComboBox.getSelectedItem();
        if (type==ClientType.BIOMART) {
            String className = "org.bridgedb.webservice.IDMapperBiomart";

            StringBuilder connString = new StringBuilder("idmapper-biomart:") ;
            StringBuilder displayName = new StringBuilder("BioMart");

            boolean transitivity = biomartTransitivityCheckBox.isSelected();
            connString.append("transitivity="+(transitivity?"true":"false"));

            boolean filterTgt = biomartFilterTgtCheckBox.isSelected();
            connString.append(",id-type-filter="+(filterTgt?"true":"false"));

            String baseurl = biomartBaseUrlTextField.getText();
            connString.append("@"+baseurl+"?");
            if (baseurl.compareTo(BiomartStub.defaultBaseURL)!=0) {
                displayName.append("("+baseurl+")");
            }

            Database db = (Database) chooseDBComboBox.getSelectedItem();
            connString.append("mart="+db.getName());
            displayName.append("(mart="+db.displayName());

            Dataset ds = (Dataset) chooseDatasetComboBox.getSelectedItem();
            connString.append("&dataset="+ds.getName());
            displayName.append(",dataset="+ds.getDisplyName()+")");

            return new String[]{connString.toString(), className, displayName.toString()};
        } else if (type==ClientType.SYNERGIZER) {
            String className = "org.bridgedb.webservice.synergizer.IDMapperSynergizer";

            StringBuilder connString = new StringBuilder("idmapper-synergizer:") ;
            StringBuilder displayName = new StringBuilder("Synergizer");

            String baseurl = synergizerBaseUrlTextField.getText();
            connString.append(baseurl+"?");
            if (baseurl.compareTo(SynergizerStub.defaultBaseURL)!=0) {
                displayName.append("("+baseurl+")");
            }

            String auth = (String)chooseAuthorityComboBox.getSelectedItem();
            connString.append("authority="+auth);
            displayName.append("authority="+auth);

            String species = (String) chooseSpeciesComboBox.getSelectedItem();
            connString.append("&species="+species);
            displayName.append(",species="+species+")");

            return new String[]{connString.toString(), className, displayName.toString()};
        } else if (typeComboBox.getSelectedItem()==ClientType.PICR) {
            String className = "org.bridgedb.webservice.picr.IDMapperPicrRest";
            boolean onlyActive = picrOnlyActiveCheckBox.isSelected();
            String connString = "idmapper-picr-rest:only-active="+(onlyActive?"true":"false");
            String displayName = "PICR: Protein Identifier Cross-Reference Service";
            return new String[]{connString, className, displayName};
        }else {
            throw new java.lang.IllegalStateException();
        }
    }

    

    public boolean isCancelled() {
        return cancelled;
    }

    private void initMapTypePanel() {
        mapTypePanel = new HashMap();
        mapTypePanel.put(ClientType.BIOMART, biomartPanel);
        mapTypePanel.put(ClientType.PICR, picrPanel);
        mapTypePanel.put(ClientType.SYNERGIZER, synergizerPanel);
    }

    private static final String FILTER_TXT = "/resources/biomart_dataset_filter.txt";
    private void loadBiomartFilterFile() {
        try {
            InputStreamReader inFile = new InputStreamReader(this.getClass().getResource(FILTER_TXT).openStream());
            BufferedReader inBuffer = new BufferedReader(inFile);

            String line;

            while ((line = inBuffer.readLine()) != null) {
                    String[] parts = line.split("\\t", 2);

                    if (parts.length!=2) continue;

                    if (parts[0].compareTo("db")==0) {
                        databaseFilter.add(parts[1]);
                    } else if (parts[0].compareTo("ds")==0) {
                        datasetFilter.add(parts[1]);
                    }

            }

            inFile.close();
            inBuffer.close();
        } catch(IOException e) {
            e.printStackTrace();
        }
    }

    private Set<String> datasetFilter = new HashSet();
    private Set<String> databaseFilter = new HashSet();

    private BiomartStub biomartStub;
    private SynergizerStub synergizerStub;
    private IDMapperClient client = null;
    private IDMapperWebservice idMapper = null;
    private boolean cancelled = true;
    private Map<ClientType, JPanel> mapTypePanel;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel biomartAdvancedPanel;
    private javax.swing.JTextField biomartBaseUrlTextField;
    private javax.swing.JCheckBox biomartFilterTgtCheckBox;
    private javax.swing.JCheckBox biomartOptionCheckBox;
    private javax.swing.JPanel biomartPanel;
    private javax.swing.JCheckBox biomartTransitivityCheckBox;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox chooseAuthorityComboBox;
    private javax.swing.JComboBox chooseDBComboBox;
    private javax.swing.JComboBox chooseDatasetComboBox;
    private javax.swing.JComboBox chooseSpeciesComboBox;
    private javax.swing.JButton okButton;
    private javax.swing.JPanel picrAdvancedPanel;
    private javax.swing.JCheckBox picrOnlyActiveCheckBox;
    private javax.swing.JCheckBox picrOptionCheckBox;
    private javax.swing.JPanel picrPanel;
    private javax.swing.JPanel synergizerAdvancedPanel;
    private javax.swing.JTextField synergizerBaseUrlTextField;
    private javax.swing.JCheckBox synergizerOptionCheckBox;
    private javax.swing.JPanel synergizerPanel;
    private javax.swing.JComboBox typeComboBox;
    // End of variables declaration//GEN-END:variables

}
