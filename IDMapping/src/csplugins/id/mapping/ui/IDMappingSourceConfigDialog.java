/*
 Copyright (c) 2006, 2007, The Cytoscape Consortium (www.cytoscape.org)

 The Cytoscape Consortium is:
 - Institute for Systems Biology
 - University of California San Diego
 - Memorial Sloan-Kettering Cancer Center
 - Institut Pasteur
 - Agilent Technologies

 This library is free software; you can redistribute it and/or modify it
 under the terms of the GNU Lesser General Public License as published
 by the Free Software Foundation; either version 2.1 of the License, or
 any later version.

 This library is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF
 MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  The software and
 documentation provided hereunder is on an "as is" basis, and the
 Institute for Systems Biology and the Whitehead Institute
 have no obligations to provide maintenance, support,
 updates, enhancements or modifications.  In no event shall the
 Institute for Systems Biology and the Whitehead Institute
 be liable to any party for direct, indirect, special,
 incidental or consequential damages, including lost profits, arising
 out of the use of this software and its documentation, even if the
 Institute for Systems Biology and the Whitehead Institute
 have been advised of the possibility of such damage.  See
 the GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with this library; if not, write to the Free Software Foundation,
 Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
 */

package csplugins.id.mapping.ui;

import csplugins.id.mapping.IDMapperClient;

import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;
import javax.swing.tree.DefaultMutableTreeNode;

/**
 *
 * @author gjj
 */
public class IDMappingSourceConfigDialog extends javax.swing.JDialog {


    public IDMappingSourceConfigDialog(javax.swing.JFrame parent, boolean modal) {
        super(parent, modal);
        init();
    }

    public IDMappingSourceConfigDialog(javax.swing.JDialog parent, boolean modal) {
        super(parent, modal);
        init();
    }

    public void init() {
        initComponents();
        
        srcTree.addTreeSelectionListener(new TreeSelectionListener() {
            public void valueChanged(TreeSelectionEvent e) {
                TreePath path = e.getPath();
                if (path==null) {
                    descTextArea.setText(msg);
                } else {
                    Object nodeObj = path.getLastPathComponent();
                    if (nodeObj instanceof DefaultMutableTreeNode) {
                        DefaultMutableTreeNode node = (DefaultMutableTreeNode)nodeObj;
                        Object clientObj = node.getUserObject();
                        if (clientObj instanceof IDMapperClient) {
                            IDMapperClient client = (IDMapperClient)clientObj;
                            descTextArea.setText(client.getDescription());
                        } else {
                            descTextArea.setText(msg);
                        }
                    } else {
                        descTextArea.setText(msg);
                    }
                }

                descTextArea.repaint();
                descScrollPane.repaint();
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        javax.swing.JPanel sourceConfPanel = new javax.swing.JPanel();
        javax.swing.JSplitPane sourceDescSplitPane = new javax.swing.JSplitPane();
        javax.swing.JScrollPane srcTreeScrollPane = new javax.swing.JScrollPane();
        descScrollPane = new javax.swing.JScrollPane();
        descTextArea = new javax.swing.JTextArea();
        javax.swing.JPanel okPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("ID Mapping Resources Configuration");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        sourceConfPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("ID Mapping Resources Configuration"));
        sourceConfPanel.setPreferredSize(new java.awt.Dimension(833, 542));
        sourceConfPanel.setLayout(new java.awt.GridBagLayout());

        sourceDescSplitPane.setPreferredSize(new java.awt.Dimension(600, 150));

        srcTreeScrollPane.setMinimumSize(new java.awt.Dimension(300, 500));
        srcTreeScrollPane.setPreferredSize(new java.awt.Dimension(300, 500));

        srcTree = new IDMappingSourceSelectionTree(this);
        srcTreeScrollPane.setViewportView(srcTree);

        sourceDescSplitPane.setLeftComponent(srcTreeScrollPane);

        descScrollPane.setMinimumSize(new java.awt.Dimension(500, 500));
        descScrollPane.setPreferredSize(new java.awt.Dimension(500, 500));

        descTextArea.setEditable(false);
        descTextArea.setLineWrap(true);
        descTextArea.setTabSize(4);
        descTextArea.setText(msg);
        descTextArea.setWrapStyleWord(true);
        descScrollPane.setViewportView(descTextArea);

        sourceDescSplitPane.setRightComponent(descScrollPane);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        sourceConfPanel.add(sourceDescSplitPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(sourceConfPanel, gridBagConstraints);

        okPanel.setLayout(new javax.swing.BoxLayout(okPanel, javax.swing.BoxLayout.LINE_AXIS));

        okButton.setText("Close");
        okButton.setToolTipText("\"Select at least two networks to merge\"");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        okPanel.add(okButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(okPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        setVisible(false);
        this.dispose();
}//GEN-LAST:event_okButtonActionPerformed

    public boolean isModified() {
        return srcTree.isModified();
    }
//    @Override
//    public void dispose() {
//        Set<IDMappingClient> selectedClients = srcTree.getSelectedIDMapperClients();
//        for (IDMappingClient client : IDMappingClientManager.allClients()) {
//            client.setSelected(selectedClients.contains(client));
//        }
//        super.dispose();
//    }

    private static final String msg = "Click on a 2nd level tree node to " +
            "add an ID mapping sources.\n\nClick on a tree node of a ID " +
            "mapping source for information about it. \n\nRight click on a ID " +
            "mapping source to edit/delete it.\n\nClick the checkboxes to " +
            "select/unselect ID mapping sources to use.";
    private IDMappingSourceSelectionTree srcTree;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane descScrollPane;
    private javax.swing.JTextArea descTextArea;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables

}
